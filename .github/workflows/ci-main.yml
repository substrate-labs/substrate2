name: CI

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

env:
    CARGO_TERM_COLOR: always

jobs:
  release-please:
    name: Update release PRs
    runs-on: ubuntu-22.04
    environment: main
    steps:
      - uses: actions/checkout@v3
        with:
          path: substrate
      - name: Clone `release-please`
        uses: actions/checkout@v3
        with:
          repository: rohanku/release-please
          path: release-please
          ref: dev
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: release-please/package-lock.json
      - name: Install `release-please`
        working-directory: release-please
        run: npm ci
      - name: Run release-please
        working-directory: substrate
        run: |
          for command in release-pr github-release; do
            node ../release-please/build/src/bin/release-please.js --debug "${command}" \
              --token ${{ secrets.SUBSTRATE2_CI_TOKEN_MAIN }} \
              --repo-url ${{ github.repository }}
          done
  check-workspace:
    uses: ./.github/workflows/check-workspace.yml
  publish-crates:
    name: Publish crates
    runs-on: ubuntu-22.04
    environment: main
    needs: [ release-please, check-workspace ]
    steps:
      - uses: actions/checkout@v3
        with:
          path: substrate
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        id: toolchain
        with:
          toolchain: stable
      - name: Clone `cargo-workspaces`
        uses: actions/checkout@v3
        with:
          repository: rohanku/cargo-workspaces
          path: cargo-workspaces
          ref: dev
      - name: Cache workspace
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ steps.toolchain.outputs.cachekey }}
          workspaces: |
            ./substrate -> target
            ./cargo-workspaces/cargo-workspaces -> target
      - name: Build `cargo-workspaces`
        working-directory: cargo-workspaces/cargo-workspaces
        run: cargo build
      - name: Publish crates
        working-directory: substrate
        run: ../cargo-workspaces/cargo-workspaces/target/debug/cargo-ws workspaces publish --from-git --token=${{ secrets.KTRA_TOKEN }} --registry=substrate --yes
  coverage:
    name: Report coverage
    uses: ./.github/workflows/coverage.yml
  deploy-api-docs:
    name: Deploy API documentation
    runs-on: ubuntu-22.04
    environment: main
    needs: [ check-workspace ]
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        id: toolchain
        with:
          toolchain: stable
      - name: Cache workspace
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ steps.toolchain.outputs.cachekey }}
          workspaces: |
            ./docs/api -> target
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Install `just`
        run: cargo install just
      - run: just build
        working-directory: docs/api
      - run: flyctl deploy --remote-only --detach
        working-directory: docs/api
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN_API }}
  deploy-docs:
    name: Deploy documentation
    runs-on: ubuntu-22.04
    environment: main
    needs: [ check-workspace ]
    steps:
      - uses: actions/checkout@v3
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'yarn'
          cache-dependency-path: docs/substrate/yarn.lock
      - run: yarn install
        working-directory: docs/substrate
      - run: yarn build 
        working-directory: docs/substrate
      - run: flyctl deploy --remote-only --detach
        working-directory: docs/substrate
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN_DOCS }}

