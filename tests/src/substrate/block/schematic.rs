use arcstr::ArcStr;
use rust_decimal_macros::dec;
use serde::{Deserialize, Serialize};
use substrate::io::*;
use substrate::schematic::*;

use substrate::pdk::Pdk;
use substrate::{block::Block, schematic::HasSchematic};

#[derive(Debug, Default, Clone)]
pub struct ResistorIo {
    pub p: InOut<Signal>,
    pub n: InOut<Signal>,
}

#[derive(Debug, Default, Clone)]
pub struct PowerIo {
    vdd: InOut<Signal>,
    vss: InOut<Signal>,
}

#[derive(Debug, Default, Clone)]
pub struct VdividerIo {
    pub pwr: PowerIo,
    pub out: Output<Signal>,
}

#[derive(Debug, Default, Clone)]
pub struct ArrayIo {
    pub inputs: Input<Array<Signal>>,
    pub out: Output<Signal>,
}

// AUTOGENERATED CODE BEGIN
/* RESISTOR IO */
impl Io for ResistorIo {}
impl FlatLen for ResistorIo {
    fn len(&self) -> usize {
        self.p.len() + self.n.len()
    }
}
impl Flatten<Direction> for ResistorIo {
    fn flatten(&self) -> Vec<Direction> {
        [self.p.flatten(), self.n.flatten()]
            .into_iter()
            .flatten()
            .collect()
    }
}
impl SchematicType for ResistorIo {
    type Data = ResistorIoData;
    fn instantiate<'n>(&self, ids: &'n [Node]) -> (Self::Data, &'n [Node]) {
        let (p, ids) = self.p.instantiate(ids);
        let (n, ids) = self.n.instantiate(ids);
        (Self::Data { p, n }, ids)
    }
}
pub struct ResistorIoData {
    pub p: <InOut<Signal> as SchematicType>::Data,
    pub n: <InOut<Signal> as SchematicType>::Data,
}
impl FlatLen for ResistorIoData {
    fn len(&self) -> usize {
        self.p.len() + self.n.len()
    }
}
impl Flatten<Node> for ResistorIoData {
    fn flatten(&self) -> Vec<Node> {
        [self.p.flatten(), self.n.flatten()]
            .into_iter()
            .flatten()
            .collect()
    }
}

/* POWER IO */
impl Io for PowerIo {}
impl FlatLen for PowerIo {
    fn len(&self) -> usize {
        self.vdd.len() + self.vss.len()
    }
}
impl Flatten<Direction> for PowerIo {
    fn flatten(&self) -> Vec<Direction> {
        [self.vdd.flatten(), self.vss.flatten()]
            .into_iter()
            .flatten()
            .collect()
    }
}
impl SchematicType for PowerIo {
    type Data = PowerIoData;
    fn instantiate<'n>(&self, ids: &'n [Node]) -> (Self::Data, &'n [Node]) {
        let (vdd, ids) = self.vdd.instantiate(ids);
        let (vss, ids) = self.vss.instantiate(ids);
        (Self::Data { vdd, vss }, ids)
    }
}
pub struct PowerIoData {
    pub vdd: <InOut<Signal> as SchematicType>::Data,
    pub vss: <InOut<Signal> as SchematicType>::Data,
}
impl FlatLen for PowerIoData {
    fn len(&self) -> usize {
        self.vdd.len() + self.vss.len()
    }
}
impl Flatten<Node> for PowerIoData {
    fn flatten(&self) -> Vec<Node> {
        [self.vdd.flatten(), self.vss.flatten()]
            .into_iter()
            .flatten()
            .collect()
    }
}

/* VDIVIDER IO */
impl Io for VdividerIo {}
impl FlatLen for VdividerIo {
    fn len(&self) -> usize {
        self.pwr.len() + self.out.len()
    }
}
impl Flatten<Direction> for VdividerIo {
    fn flatten(&self) -> Vec<Direction> {
        [self.pwr.flatten(), self.out.flatten()]
            .into_iter()
            .flatten()
            .collect()
    }
}
impl SchematicType for VdividerIo {
    type Data = VdividerIoData;
    fn instantiate<'n>(&self, ids: &'n [Node]) -> (Self::Data, &'n [Node]) {
        let (pwr, ids) = self.pwr.instantiate(ids);
        let (out, ids) = self.out.instantiate(ids);
        (Self::Data { pwr, out }, ids)
    }
}
pub struct VdividerIoData {
    pub pwr: <PowerIo as SchematicType>::Data,
    pub out: <Output<Signal> as SchematicType>::Data,
}
impl FlatLen for VdividerIoData {
    fn len(&self) -> usize {
        self.pwr.len() + self.out.len()
    }
}
impl Flatten<Node> for VdividerIoData {
    fn flatten(&self) -> Vec<Node> {
        [self.pwr.flatten(), self.out.flatten()]
            .into_iter()
            .flatten()
            .collect()
    }
}

/* ARRAY IO */
impl Io for ArrayIo {}
impl FlatLen for ArrayIo {
    fn len(&self) -> usize {
        self.inputs.len() + self.out.len()
    }
}
impl Flatten<Direction> for ArrayIo {
    fn flatten(&self) -> Vec<Direction> {
        [self.inputs.flatten(), self.out.flatten()]
            .into_iter()
            .flatten()
            .collect()
    }
}
impl SchematicType for ArrayIo {
    type Data = ArrayIoData;
    fn instantiate<'n>(&self, ids: &'n [Node]) -> (Self::Data, &'n [Node]) {
        let (inputs, ids) = self.inputs.instantiate(ids);
        let (out, ids) = self.out.instantiate(ids);
        (Self::Data { inputs, out }, ids)
    }
}
pub struct ArrayIoData {
    pub inputs: <Input<Array<Signal>> as SchematicType>::Data,
    pub out: <Output<Signal> as SchematicType>::Data,
}
impl FlatLen for ArrayIoData {
    fn len(&self) -> usize {
        self.inputs.len() + self.out.len()
    }
}
impl Flatten<Node> for ArrayIoData {
    fn flatten(&self) -> Vec<Node> {
        [self.inputs.flatten(), self.out.flatten()]
            .into_iter()
            .flatten()
            .collect()
    }
}
// AUTOGENERATED CODE END

#[derive(Clone, Copy, Hash, PartialEq, Eq, Serialize, Deserialize)]
pub struct Resistor {
    pub r: usize,
}

#[derive(Clone, Copy, Hash, PartialEq, Eq, Serialize, Deserialize)]
pub struct Vdivider {
    pub r1: Resistor,
    pub r2: Resistor,
}

/// Shorts all input signals to an output node.
#[derive(Clone, Copy, Hash, PartialEq, Eq, Serialize, Deserialize)]
pub struct ArrayShorter {
    width: usize,
}

impl Block for Resistor {
    type Io = ResistorIo;

    fn id() -> ArcStr {
        arcstr::literal!("resistor")
    }

    fn name(&self) -> ArcStr {
        arcstr::format!("resistor_{}", self.r)
    }

    fn io(&self) -> Self::Io {
        Default::default()
    }
}

impl Block for Vdivider {
    type Io = VdividerIo;

    fn id() -> ArcStr {
        arcstr::literal!("vdivider")
    }

    fn name(&self) -> ArcStr {
        arcstr::format!("vdivider_{}_{}", self.r1.name(), self.r2.name())
    }

    fn io(&self) -> Self::Io {
        Default::default()
    }
}

impl Block for ArrayShorter {
    type Io = ArrayIo;

    fn id() -> ArcStr {
        arcstr::literal!("array_shorter")
    }
    fn name(&self) -> ArcStr {
        arcstr::format!("array_shorter_{}", self.width)
    }
    fn io(&self) -> Self::Io {
        Self::Io {
            inputs: Input(Array::new(self.width, Signal)),
            out: Output(Signal),
        }
    }
}

impl HasSchematic for Resistor {
    type Data = ();
}

impl HasSchematic for Vdivider {
    type Data = ();
}

impl HasSchematic for ArrayShorter {
    type Data = ();
}

impl<PDK: Pdk> HasSchematicImpl<PDK> for Resistor {
    fn schematic(
        &self,
        io: ResistorIoData,
        cell: &mut CellBuilder<PDK, Self>,
    ) -> substrate::error::Result<Self::Data> {
        cell.add_primitive(PrimitiveDevice::Res2 {
            pos: *io.p,
            neg: *io.n,
            value: dec!(1000),
        });
        Ok(())
    }
}

impl<PDK: Pdk> HasSchematicImpl<PDK> for Vdivider {
    fn schematic(
        &self,
        io: VdividerIoData,
        cell: &mut CellBuilder<PDK, Self>,
    ) -> substrate::error::Result<Self::Data> {
        let r1 = cell.instantiate(self.r1);
        let r2 = cell.instantiate(self.r2);

        cell.connect(io.pwr.vdd, r1.io.p);
        cell.connect(io.out, r1.io.n);
        cell.connect(io.out, r2.io.p);
        cell.connect(io.pwr.vss, r2.io.n);
        Ok(())
    }
}

impl<PDK: Pdk> HasSchematicImpl<PDK> for ArrayShorter {
    fn schematic(
        &self,
        io: ArrayIoData,
        cell: &mut CellBuilder<PDK, Self>,
    ) -> substrate::error::Result<Self::Data> {
        for i in 0..self.width {
            cell.connect(io.inputs[i], io.out)
        }
        Ok(())
    }
}
